#!/usr/bin/env bash
shopt -s extglob

RED='\033[1;91m'
BLUE='\033[1;94m'
GREEN='\033[1;92m'
YELLOW='\033[1;33m'
RESETCOLOR='\033[1;00m'

count=0
BATCH_SIZE=100
wait_batch() {
    (( count++ ))
    (( count % BATCH_SIZE == 0 )) && wait && count=0
}

find_type() {
    local type="$1"
    local name="$2"
    shift 2
    find "$@" -type "$type" -perm -u+w -name "$name" 2>/dev/null
}

nocolor() { sed -r 's|\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]||g' ; }

info_msg() {
    if [ "$RIM_QUIET_MODE" != 1 ]
        then echo -e "${GREEN}[ INFO ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
            if [[ "$NOT_TERM" == 1 && "$RIM_DONT_NOTIFY" != 1 ]]
                then notify-send -a 'RunImage Info' "$(echo -e "$@"|nocolor)" 2>/dev/null &
            fi
    fi
}

error_msg() {
    echo -e "${RED}[ ERROR ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
    if [ "$NOT_TERM" == 1 ]
        then notify-send -a 'RunImage Error' "$(echo -e "$@"|nocolor)" 2>/dev/null &
    fi
}

print_help() {
    echo -e "[ Usage ]: rim-shrink [OPTIONS] /path/RunDir

[ Options ]:
    -a, --all         Shrink all (env: RIM_SHRINK_ALL=1)
    -c, --staticlibs  Shrink static libs '*.a' (env: RIM_SHRINK_STATICLIBS=1)
    -d, --docs        Shrink /usr/share/{man,doc,help,info,gtk-doc} and '*.md' 'README*' (env: RIM_SHRINK_DOCS=1)
    -s, --strip       Strip all debugging symbols & sections (env: RIM_SHRINK_STRIP=1)
    -t, --locales     Shrink all locales except uk ru en en_US (env: RIM_SHRINK_LOCALES=1)
    -o, --objects     Shrink object files '*.o' (env: RIM_SHRINK_OBJECTS=1)
    -l, --libtool     Shrink libtool files '*.la' (env: RIM_SHRINK_LIBTOOL=1)
    -r, --src         Shrink source code files for build (env: RIM_SHRINK_SRC=1)
    -h, --help        Show this message
    -v, --verbose     Verbose output"
    exit 1
}


[ ! -n "$(tty|grep -v 'not a'|grep -Eo 'tty|pts')" ] && \
    NOT_TERM=1

[ -f "$RIMENVFL" ] && \
    source "$RIMENVFL"

unset verb
while [[ $# -gt 0 ]]
    do
        case "$1" in
            -a|--all       ) RIM_SHRINK_ALL=1 ;;
            -c|--staticlibs) RIM_SHRINK_STATICLIBS=1 ;;
            -d|--docs      ) RIM_SHRINK_DOCS=1 ;;
            -s|--strip     ) RIM_SHRINK_STRIP=1 ;;
            -l|--locales   ) RIM_SHRINK_LOCALES=1 ;;
            -o|--objects   ) RIM_SHRINK_OBJECTS=1 ;;
            -l|--libtool   ) RIM_SHRINK_LIBTOOL=1 ;;
            -r|--src       ) RIM_SHRINK_SRC=1 ;;
            -h|--help      ) print_help ;;
            -v|--verbose   ) verb='-v' ;;
            -*) error_msg "Unknown parameter: ${BLUE}$1\n"; print_help ;;
            *) RUNDIR="$1" ; RUNROOTFS="$1/rootfs" ;;
        esac
        shift
done

[ "$RIM_SHRINK_ALL" == 1 ] && \
    RIM_SHRINK_SRC=1 RIM_SHRINK_DOCS=1 \
    RIM_SHRINK_STRIP=1 RIM_SHRINK_LIBTOOL=1 \
    RIM_SHRINK_STATICLIBS=1 RIM_SHRINK_LOCALES=1 \
    RIM_SHRINK_OBJECTS=1

[[ ! -n "$RUNDIR" && -d "$OVERFS_MNT" ]] && \
    RUNDIR="$OVERFS_MNT"

RUNDIR="${RUNDIR:=RunDir}"
RUNROOTFS="${RUNROOTFS:=$RUNDIR/rootfs}"

[[ "$INSIDE_RUNIMAGE" == 1 && ! -d "$RUNROOTFS" ]] && \
     RUNROOTFS='/'

if [[ -d "$RUNDIR" && -d "$RUNROOTFS" ]]
    then
        if [ -w "$RUNROOTFS" ]
            then
                info_msg "Shrinking rootfs: '$RUNROOTFS'"

                IFS=$'\n'
                SHRINK_ITEMS=(
                    "$RUNROOTFS"/usr/share/libalpm/hooks/*systemd*
                    "$RUNROOTFS"/usr/share/libalpm/scripts/*systemd*
                    "$RUNROOTFS"/usr/share/libalpm/hooks/dbus-reload.hook
                    "$RUNROOTFS"/etc/bash_completion.d/megacmd_completion.sh
                    "$RUNROOTFS"/etc/X11/xinit/xinitrc.d/50-systemd-user.sh
                    "$RUNROOTFS"/usr/share/libalpm/hooks/60-depmod.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/60-mkinitcpio-remove.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/70-dkms-install.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/70-dkms-upgrade.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/71-dkms-remove.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/90-mkinitcpio-install.hook
                    "$RUNROOTFS"/usr/share/libalpm/hooks/grub.hook
                    "$RUNROOTFS"/usr/share/libalpm/scripts/depmod
                    "$RUNROOTFS"/usr/share/libalpm/scripts/dkms
                    "$RUNROOTFS"/usr/share/libalpm/scripts/mkinitcpio
                    "$RUNROOTFS"/usr/share/libalpm/hooks/90-update-appstream-cache.hook
                    "$RUNROOTFS"/var/tmp/*
                    "$RUNROOTFS"/var/lib/pacman/sync/*
                    "$RUNROOTFS"/var/cache/pacman/pkg/*
                    "$RUNROOTFS"/var/lib/pacman/db.lck
                    "$RUNROOTFS"/etc/pacman.d/gnupg/pubring.gpg~
                    "$RUNROOTFS"/var/cache/apt/archives/*.deb
                    "$RUNROOTFS"/var/cache/apt/*.bin
                    "$RUNROOTFS"/var/lib/apt/lists/deb.*
                    "$RUNROOTFS"/var/log/apt/*
                    "$RUNROOTFS"/var/cache/apk/*
                    "$RUNROOTFS"/var/cache/xbps/*
                    "$RUNROOTFS"/etc/pacman.d/gnupg/S.*
                    "$RUNROOTFS"/{dev,sys,proc,tmp,run}/*
                    $(find_type d '__pycache__' "$RUNROOTFS"/)
                    $(find_type f '*.pacnew' "$RUNROOTFS"/)
                    $(find_type f '*.pacsave' "$RUNROOTFS"/)
                    $(find_type f '*.log' "$RUNROOTFS"/var/log/)
                    $(find_type f '*.old' "$RUNROOTFS"/)
                    $(find_type f '*.back' "$RUNROOTFS"/)
                )

                [ "$RIM_SHRINK_LOCALES" == 1 ] && SHRINK_ITEMS+=(
                    "$RUNROOTFS"/usr/share/locale/!(locale.alias|uk|ru|en|en_US)
                )

                [ "$RIM_SHRINK_SRC" == 1 ] && SHRINK_ITEMS+=(
                    "$RUNROOTFS"/usr/include/*
                    "$RUNROOTFS"/usr/src/*
                    "$RUNROOTFS"/usr/*/*pkgconfig/*
                    $(find_type f '*.h' "$RUNROOTFS"/)
                    $(find_type f '*.pc' "$RUNROOTFS"/)
                    $(find_type f '*.c' "$RUNROOTFS"/)
                    $(find_type f '*.cc' "$RUNROOTFS"/)
                    $(find_type f '*.cpp' "$RUNROOTFS"/)
                    $(find_type f 'CMakeLists*' "$RUNROOTFS"/)
                    $(find_type f 'Makefile*' "$RUNROOTFS"/)
                    $(find_type f '*.cmake' "$RUNROOTFS"/)
                    $(find_type f '*.in' "$RUNROOTFS"/)
                    $(find_type f '*.inc' "$RUNROOTFS"/)
                )

                [ "$RIM_SHRINK_DOCS" == 1 ] && SHRINK_ITEMS+=(
                    "$RUNROOTFS"/usr/share/man/*
                    "$RUNROOTFS"/usr/share/doc/*
                    "$RUNROOTFS"/usr/share/info/*
                    "$RUNROOTFS"/usr/share/help/*
                    "$RUNROOTFS"/usr/share/gtk-doc/*
                    $(find_type f '*.md' "$RUNROOTFS"/)
                    $(find_type f 'README*' "$RUNROOTFS"/)
                )

                [ "$RIM_SHRINK_OBJECTS" == 1 ] && SHRINK_ITEMS+=(
                    $(find_type f '*.o' "$RUNROOTFS"/)
                )

                [ "$RIM_SHRINK_STATICLIBS" == 1 ] && SHRINK_ITEMS+=(
                    $(find_type f '*.a' "$RUNROOTFS"/)
                )

                [ "$RIM_SHRINK_LIBTOOL" == 1 ] && SHRINK_ITEMS+=(
                    $(find_type f '*.la' "$RUNROOTFS"/)
                )

                nv_version="$(cat /sys/module/nvidia/version 2>/dev/null)"
                nv_version_inside="$(basename "$RUNROOTFS"/usr/lib/libGLX_nvidia.so.*.*|tail -c +18)"
                [[ -n "$nv_version" && "$nv_version_inside" == '000.00.00' ]] && SHRINK_ITEMS+=(
                    $(find_type f "*so.$nv_version" "$RUNROOTFS"/usr)
                )

                for item in "${SHRINK_ITEMS[@]}"
                    do rm $verb -rf "$item" & wait_batch
                done

                if [ "$RIM_SHRINK_STRIP" == 1 ]
                    then
                        if command -v strip &>/dev/null
                            then
                                for file in $(find_type f '*' "$RUNROOTFS"/bin "$RUNROOTFS"/sbin \
                                    "$RUNROOTFS"/usr/bin "$RUNROOTFS"/usr/sbin \
                                    "$RUNROOTFS"/usr/local/bin "$RUNROOTFS"/usr/local/sbin \
                                    "$RUNROOTFS"/lib "$RUNROOTFS"/lib64 \
                                    "$RUNROOTFS"/opt "$RUNROOTFS"/lib32 \
                                    "$RUNROOTFS"/usr/lib "$RUNROOTFS"/usr/lib32 \
                                    "$RUNROOTFS"/usr/lib64 "$RUNROOTFS"/usr/libexec \
                                    "$RUNROOTFS"/usr/local/lib "$RUNROOTFS"/usr/local/lib32 \
                                    "$RUNROOTFS"/usr/local/lib64 "$RUNROOTFS"/usr/local/libexec)
                                    do
                                        strip $verb --strip-debug "$file" 2>/dev/null & wait_batch
                                done
                            else
                                error_msg "strip not found!"
                        fi
                fi

                if [ -f "$RUNROOTFS"/etc/ld.so.version ]
                    then
                        info_msg "Found ld.so.version!"
                        rm $verb -rf "$RUNROOTFS"/etc/ld.so.version
                        RIM_NO_NVIDIA_CHECK=1 RIM_QUIET_MODE=1 RIM_SANDBOX_NET=0 \
                            "$RUNDIR/Run" ldconfig
                fi

                wait
            else
                error_msg "Unable to shrink rootfs. Read-only!"
                exit 1
        fi
    else
        error_msg "RunDir: '$RUNDIR' or rootfs: '$RUNROOTFS' not found!"
        exit 1
fi
