#!/usr/bin/env bash

export RED='\033[1;91m'
export BLUE='\033[1;94m'
export GREEN='\033[1;92m'
export YELLOW='\033[1;33m'
export RESETCOLOR='\033[1;00m'

red_msg() { echo -e "${RED}${@}${RESETCOLOR}" ; }
blue_msg() { echo -e "${BLUE}${@}${RESETCOLOR}" ; }
green_msg() { echo -e "${GREEN}${@}${RESETCOLOR}" ; }
yellow_msg() { echo -e "${YELLOW}${@}${RESETCOLOR}" ; }

rpids_ps() {
    args=($@)
    set -o pipefail
    for rpids in ${args[@]}
        do
            if [ -f "$rpids" ]
                then
                    red_msg "\n==========================================================="
                    green_msg "Monitoring of processes from: ${BLUE}'$rpids'"
                    red_msg "-----------------------------------------------------------"
                    echo "$(ps -fp $(cat "$rpids" 2>/dev/null) 2>/dev/null||\
                                rm -f "$rpids" 2>/dev/null)"
                    red_msg "==========================================================="
                else norpids="$(( norpids + 1 ))"
            fi
    done
    [ "$norpids" == "${#args[@]}" ] && \
        kill -2 $(pgrep -fa watch|grep "rpids_check.*$RPIDSMONPID"|awk '{print$1}') 2>/dev/null
}

rpids_check() {
    if [ -n "$RPIDS" ]
        then rpids_ps "$(for rpids in ${RPIDS[@]}; do echo "/tmp/.rpids.$rpids"; done)"
        else
            RPIDSFLS="$(ls /tmp/.rpids.* 2>/dev/null)"
            if [ -n "$RPIDSFLS" ]
                then rpids_ps "$RPIDSFLS"
                else green_msg "Waiting for RunImage containers..."
            fi
    fi
}

rpids_check_loop() { watch -ctn 0.5 -x bash -c rpids_check $RPIDSMONPID ; }

if [ "$1" == '-ps' ]
    then shift ; RPIDS_PS=1
    else unset RPIDS_PS
fi
[ -n "$1" ] && \
    export RPIDS="$@"||\
    unset RPIDS
export RPIDSMONPID=$BASHPID
export -f rpids_check rpids_ps blue_msg \
          red_msg green_msg yellow_msg

if [ "$RPIDS_PS" == 1 ]
    then rpids_check $RPIDSMONPID
    else rpids_check_loop
fi
